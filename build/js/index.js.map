{
  "version": 3,
  "sources": ["../../build/_snowpack/pkg/line-circle-collision.js", "../../build/js/helper.js", "../../build/js/index.js"],
  "sourcesContent": ["function pointCircleCollision(point, circle, r) {\n    if (r===0) return false\n    var dx = circle[0] - point[0];\n    var dy = circle[1] - point[1];\n    return dx * dx + dy * dy <= r * r\n}\n\nvar pointCircleCollision_1 = pointCircleCollision;\n\nvar tmp = [0, 0];\n\nfunction lineCircleCollide(a, b, circle, radius, nearest) {\n    //check to see if start or end points lie within circle \n    if (pointCircleCollision_1(a, circle, radius)) {\n        if (nearest) {\n            nearest[0] = a[0];\n            nearest[1] = a[1];\n        }\n        return true\n    } if (pointCircleCollision_1(b, circle, radius)) {\n        if (nearest) {\n            nearest[0] = b[0];\n            nearest[1] = b[1];\n        }\n        return true\n    }\n    \n    var x1 = a[0],\n        y1 = a[1],\n        x2 = b[0],\n        y2 = b[1],\n        cx = circle[0],\n        cy = circle[1];\n\n    //vector d\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    \n    //vector lc\n    var lcx = cx - x1;\n    var lcy = cy - y1;\n    \n    //project lc onto d, resulting in vector p\n    var dLen2 = dx * dx + dy * dy; //len2 of d\n    var px = dx;\n    var py = dy;\n    if (dLen2 > 0) {\n        var dp = (lcx * dx + lcy * dy) / dLen2;\n        px *= dp;\n        py *= dp;\n    }\n    \n    if (!nearest)\n        nearest = tmp;\n    nearest[0] = x1 + px;\n    nearest[1] = y1 + py;\n    \n    //len2 of p\n    var pLen2 = px * px + py * py;\n    \n    //check collision\n    return pointCircleCollision_1(nearest, circle, radius)\n            && pLen2 <= dLen2 && (px * dx + py * dy) >= 0\n}\n\nvar lineCircleCollision = lineCircleCollide;\n\nexport default lineCircleCollision;\n", "import collide from \"../_snowpack/pkg/line-circle-collision.js\";\r\n\r\n/*\r\n * the draw loop to display the circles on the canvas.\r\n * @param {object} config - function parameter object.\r\n * @param {canvas} config.canvas - reference to the canvas element.\r\n * @param {2d context} config.ctx - reference to the 2d context of the canvas.\r\n * @param {array} balls - ball objects to display inside the canvas.\r\n * @returns void.\r\n */\r\nexport function draw(config = {}) {\r\n  // clear the previous canvas\r\n  config.ctx.clearRect(0, 0, config.canvas.width, config.canvas.height);\r\n  const ceiling = getCeiling(config.canvas.width, config.canvas.height);\r\n  const floor = getFloor(config.canvas.width, config.canvas.height);\r\n  drawWalls({\r\n    ctx: config.ctx,\r\n    ceiling,\r\n    floor,\r\n    maxHeight: config.canvas.height,\r\n  });\r\n  config.balls.forEach((ball) => {\r\n    drawBall({\r\n      ctx: config.ctx,\r\n      y: ball.y,\r\n      x: ball.x,\r\n      radius: ball.radius,\r\n      color: ball.color,\r\n    });\r\n    ball.x += ball.dx;\r\n    ball.y += ball.dy;\r\n\r\n    //combine floor and ceiling and detect collisions\r\n    ceiling.concat(floor).forEach((segment) => {\r\n      const hit = collide(\r\n        [segment.start.x, segment.start.y],\r\n        [segment.end.x, segment.end.y],\r\n        [ball.x, ball.y],\r\n        ball.radius\r\n      );\r\n      if (hit === true) {\r\n        if (segment.direction === \"horizontal\") {\r\n          ball.dy = -ball.dy;\r\n        } else {\r\n          ball.dx = -ball.dx;\r\n        }\r\n      }\r\n    });\r\n    // bouncing off the top and bottom\r\n    if (\r\n      ball.y + ball.dy < ball.radius ||\r\n      ball.y > config.canvas.height - ball.radius\r\n    ) {\r\n      ball.dy = -ball.dy;\r\n    }\r\n    //bouncing off left and right\r\n\r\n    if (\r\n      ball.x + ball.dx > config.canvas.width - ball.radius ||\r\n      ball.x + ball.dx < ball.radius\r\n    ) {\r\n      if (ball.remove) {\r\n        config.balls.pop();\r\n        return;\r\n      }\r\n      ball.dx = -ball.dx;\r\n    }\r\n  });\r\n  requestAnimationFrame(() => draw(config));\r\n}\r\n\r\n/*\r\n * creates a ball with random parameters\r\n * @returns {object} - ball.\r\n */\r\nexport function getBall(canvas) {\r\n  return {\r\n    x: canvas.width / 2,\r\n    y: canvas.height / 2,\r\n    dx: Math.random() - 0.5,\r\n    dy: Math.random() - 0.5,\r\n    radius: getRandomNumber(3, 20),\r\n    color: getRandomColor(),\r\n  };\r\n}\r\n\r\n/*\r\n * get ceiling line definitions.\r\n * @param {number} maxWidth - the width of the canvas.\r\n * @param {number} maxHeight - the height of the canvas.\r\n * @returns {array} - line objects.\r\n */\r\nfunction getCeiling(maxWidth, maxHeight) {\r\n  const ceiling = [\r\n    {\r\n      start: { x: 0, y: maxHeight / 3 },\r\n      end: { x: 50, y: maxHeight / 3 },\r\n      direction: \"horizontal\",\r\n    },\r\n    {\r\n      start: { x: 50, y: maxHeight / 3 },\r\n      end: { x: 50, y: 10 },\r\n      direction: \"vertical\",\r\n    },\r\n    {\r\n      start: { x: 50, y: 10 },\r\n      end: { x: maxWidth - 50, y: 10 },\r\n      direction: \"horizontal\",\r\n    },\r\n    {\r\n      start: { x: maxWidth - 50, y: 10 },\r\n      end: { x: maxWidth - 50, y: maxHeight / 3 },\r\n      direction: \"vertical\",\r\n    },\r\n    {\r\n      start: { x: maxWidth - 50, y: maxHeight / 3 },\r\n      end: { x: maxWidth, y: maxHeight / 3 },\r\n      direction: \"horizontal\",\r\n    },\r\n  ];\r\n  return ceiling;\r\n}\r\n\r\n/*\r\n * get the floor line definitions\r\n * @param {number} maxWidth - the width of the canvas.\r\n * @param {number} maxHeight - the height of the canvas.\r\n * @returns {array} - line objects.\r\n */\r\nfunction getFloor(maxWidth, maxHeight) {\r\n  const floor = [\r\n    {\r\n      start: { x: 0, y: maxHeight - maxHeight / 3 },\r\n      end: { x: 50, y: maxHeight - maxHeight / 3 },\r\n      direction: \"horizontal\",\r\n    },\r\n    {\r\n      start: { x: 50, y: maxHeight - maxHeight / 3 },\r\n      end: { x: 50, y: maxHeight - 10 },\r\n      direction: \"vertical\",\r\n    },\r\n    {\r\n      start: { x: 50, y: maxHeight - 10 },\r\n      end: { x: maxWidth - 50, y: maxHeight - 10 },\r\n      direction: \"horizontal\",\r\n    },\r\n    {\r\n      start: { x: maxWidth - 50, y: maxHeight - 10 },\r\n      end: { x: maxWidth - 50, y: maxHeight - maxHeight / 3 },\r\n      direction: \"vertical\",\r\n    },\r\n    {\r\n      start: { x: maxWidth - 50, y: maxHeight - maxHeight / 3 },\r\n      end: { x: maxWidth, y: maxHeight - maxHeight / 3 },\r\n      direction: \"horizontal\",\r\n    },\r\n  ];\r\n  return floor;\r\n}\r\n\r\n/*\r\n * draws ceiling and floor lines on the canvas.\r\n * @param {object} params - function parameter object.\r\n * @param {context} params.ctx - 2d context of the canvas.\r\n * @param {array} params.ceiling - ceiling line definitons.\r\n * @param {array} params.floor - floor line definitions.\r\n * @param {number} params.maxHeight - the canvas height.\r\n * @returns void.\r\n */\r\nfunction drawWalls({ ctx, ceiling, floor, maxHeight }) {\r\n  ctx.strokeStyle = \"orangered\";\r\n  ctx.lineWidth = 3;\r\n  ctx.lineJoin = \"round\";\r\n  //ceiling\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, maxHeight / 3);\r\n  for (let i = 0; i < ceiling.length; i++) {\r\n    const line = ceiling[i];\r\n    ctx.lineTo(line.end.x, line.end.y);\r\n  }\r\n  ctx.stroke();\r\n  //floor\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, maxHeight - maxHeight / 3);\r\n  for (let i = 0; i < floor.length; i++) {\r\n    const line = floor[i];\r\n    ctx.lineTo(line.end.x, line.end.y);\r\n  }\r\n  ctx.stroke();\r\n}\r\n\r\n/*\r\n * draws a ball on the context.\r\n * @param {object} params - function parameter object.\r\n * @param {context} params.ctx - 2d context of the canvas.\r\n * @param {number} params.y - y coordinate of the balls center.\r\n * @param {number} params.x - x coordinate of the balls center.\r\n * @param {number} params.radius - radius of the ball.\r\n * @param {string} params.color - the color of the ball.\r\n */\r\nfunction drawBall({ ctx, y, x, radius, color }) {\r\n  ctx.beginPath();\r\n  const startAngle = 0;\r\n  const endAngle = Math.PI * 2;\r\n  const drawAntiClockwise = false;\r\n  ctx.arc(x, y, radius, startAngle, endAngle, drawAntiClockwise);\r\n  ctx.fillStyle = color;\r\n  ctx.fill();\r\n  ctx.closePath();\r\n}\r\n\r\n/*\r\n * creates a random integer between 2 numbers (inclusive)\r\n * @param {number} min - min value.\r\n * @param {number} max - max value.\r\n * @returns {number} - the generated number.\r\n */\r\nfunction getRandomNumber(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/*\r\n * create a random hex color.\r\n * @returns {string} - the color.\r\n */\r\nfunction getRandomColor() {\r\n  var letters = \"0123456789ABCDEF\";\r\n  var color = \"#\";\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n", "import { draw, getBall } from \"./helper.js\";\r\n\r\n//references to html elements.\r\nconst canvas = document.getElementById(\"museum\");\r\nconst removeButton = document.getElementById(\"removeBall\");\r\nconst addButton = document.getElementById(\"addBall\");\r\nconst ctx = canvas.getContext(\"2d\");\r\n\r\n//set width and height of the canvas\r\nconst maxWidth = window.innerWidth;\r\nconst maxHeight = window.innerHeight - 78;\r\ncanvas.width = maxWidth;\r\ncanvas.height = maxHeight;\r\n\r\n// logic to add/remove balls\r\naddButton.addEventListener(\"click\", function () {\r\n  const ball = getBall(canvas);\r\n  balls.push(ball);\r\n});\r\n\r\nremoveButton.addEventListener(\"click\", function () {\r\n  // remove the first ball but get a copy of it.\r\n  const ball = balls.shift();\r\n  ball.remove = true;\r\n  ball.dx = 0;\r\n  ball.dy = 0;\r\n  ball.x = canvas.width / 2;\r\n  ball.y = canvas.height / 2;\r\n  balls.push(ball);\r\n  const removeDirection = Math.random() > 0.5 ? 50 : -50;\r\n  window.setTimeout(() => {\r\n    ball.dx = removeDirection;\r\n  }, 500);\r\n});\r\n\r\nconst balls = [];\r\n//number of balls to display initially.\r\nconst ballCount = 50;\r\n// fill the balls array\r\nfor (let i = 0; i < ballCount; i++) {\r\n  balls.push(getBall(canvas));\r\n}\r\n\r\nlet config = { canvas, ctx, balls };\r\n// display the balls on the canvas\r\ndraw(config);\r\n"],
  "mappings": "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",
  "names": []
}
